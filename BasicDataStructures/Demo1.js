// splice()Tham s·ªë ƒë·∫ßu ti√™n c·ªßa ' bi·ªÉu di·ªÖn ch·ªâ s·ªë tr√™n m·∫£ng ƒë·ªÉ b·∫Øt ƒë·∫ßu x√≥a c√°c ph·∫ßn t·ª≠, 
// trong khi tham s·ªë th·ª© hai bi·ªÉu di·ªÖn s·ªë ph·∫ßn t·ª≠ c·∫ßn x√≥a
//Tham s·ªë th·ª© 3 c·ªßa splice()
const numbers = [10, 11, 12, 12, 15];
const startIndex = 3;
const amountToDelete = 1;

numbers.splice(startIndex, amountToDelete, 13, 14);
console.log(numbers);
// L·∫ßn xu·∫•t hi·ªán th·ª© hai c·ªßa 12 b·ªã lo·∫°i b·ªè v√† ch√∫ng ta th√™m 13 v√† 14 ·ªü c√πng m·ªôt ch·ªâ s·ªë. 
// numbers M·∫£ng b√¢y gi·ªù s·∫Ω l√† [ 10, 11, 12, 13, 14, 15 ].

let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];

let todaysWeather = weatherConditions.slice(1, 3);
console.log(todaysWeather);
console.log(weatherConditions);

// Thay v√¨ s·ª≠a ƒë·ªïi m·ªôt m·∫£ng, slice()h√£y sao ch√©p ho·∫∑c tr√≠ch xu·∫•t m·ªôt s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ nh·∫•t ƒë·ªãnh v√†o m·ªôt m·∫£ng m·ªõi,
// gi·ªØ nguy√™n m·∫£ng m√† n√≥ ƒë∆∞·ª£c g·ªçi. slice()ch·ªâ l·∫•y 2 tham s·ªë ‚Äî tham s·ªë ƒë·∫ßu ti√™n l√† ch·ªâ m·ª•c ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t 
// v√† tham s·ªë th·ª© hai l√† ch·ªâ m·ª•c ƒë·ªÉ d·ª´ng tr√≠ch xu·∫•t 
let weatherConditions2 = ['rain', 'snow', 'sleet', 'hail', 'clear'];
let todaysWeather2 = weatherConditions.slice(1, 3);
//todaysWeathers·∫Ω c√≥ gi√° tr·ªã ['snow', 'sleet'], trong khi weatherConditionsv·∫´n c√≥ ['rain', 'snow', 'sleet', 'hail', 'clear'].

//to√°n t·ª≠ spread m·ªõi c·ªßa ES6 cho ph√©p ch√∫ng ta d·ªÖ d√†ng sao ch√©p t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ c·ªßa m·ªôt m·∫£ng, theo th·ª© t·ª±, v·ªõi c√∫ ph√°p ƒë∆°n gi·∫£n v√† d·ªÖ ƒë·ªçc. C√∫ ph√°p spread tr√¥ng ƒë∆°n gi·∫£n nh∆∞ th·∫ø n√†y:...
let thisArray = [true, true, undefined, false, null];
let thatArray = [...thisArray];
console.log(thatArray);

// indexOf() l√† m·ªôt ph∆∞∆°ng th·ª©c trong JavaScript ƒë∆∞·ª£c d√πng ƒë·ªÉ t√¨m v·ªã tr√≠ (ch·ªâ s·ªë - index) ƒë·∫ßu ti√™n c·ªßa m·ªôt ph·∫ßn t·ª≠ c·ª• th·ªÉ trong m·∫£ng ho·∫∑c chu·ªói.
// array.indexOf(element);
// element: ph·∫ßn t·ª≠ b·∫°n mu·ªën t√¨m.
// Tr·∫£ v·ªÅ:
// Ch·ªâ s·ªë (index) c·ªßa ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n t√¨m th·∫•y (b·∫Øt ƒë·∫ßu t·ª´ 0).
// -1 n·∫øu kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ ƒë√≥.

//Cac cach them thuoc tinh cho doi tuong( Object)
const tekkenCharacter = {
  player: 'Hwoarang',
  fightingStyle: 'Tae Kwon Doe',
  human: true
};

tekkenCharacter.origin = 'South Korea';
tekkenCharacter['hair color'] = 'dyed orange';

const eyes = 'eye color';
tekkenCharacter[eyes] = 'brown';
// Sau khi th√™m t·∫•t c·∫£ c√°c v√≠ d·ª•, ƒë·ªëi t∆∞·ª£ng s·∫Ω tr√¥ng nh∆∞ th·∫ø n√†y:
// {
//   player: 'Hwoarang',
//   fightingStyle: 'Tae Kwon Doe',
//   human: true,
//   origin: 'South Korea',
//   'hair color': 'dyed orange',
//   'eye color': 'brown'
// };

// L√Ω do c·∫ßn ƒë·∫∑t d·∫•u nh√°y ƒë∆°n ' ' cho m·ªôt s·ªë thu·ªôc t√≠nh:
// Trong JavaScript, t√™n thu·ªôc t√≠nh (property name) c·ªßa m·ªôt object th∆∞·ªùng l√† m·ªôt t·ª´ (identifier) ‚Äî kh√¥ng c√≥ d·∫•u c√°ch, kh√¥ng k√Ω t·ª± ƒë·∫∑c bi·ªát.
// Nh∆∞ng khi t√™n thu·ªôc t√≠nh:
// ch·ª©a d·∫•u c√°ch (space) nh∆∞ "hair color"
// ho·∫∑c c√≥ k√Ω t·ª± kh√¥ng h·ª£p l·ªá v·ªõi bi·∫øn th√¥ng th∆∞·ªùng (v√≠ d·ª•: d·∫•u g·∫°ch ngang -, s·ªë ·ªü ƒë·∫ßu‚Ä¶)
// ‚Üí Th√¨ b·∫°n ph·∫£i ƒë·∫∑t n√≥ trong d·∫•u nh√°y (' ' ho·∫∑c " "), v√¨ JavaScript s·∫Ω coi ƒë√≥ l√† string key ch·ª© kh√¥ng ph·∫£i t√™n bi·∫øn h·ª£p l·ªá.

//Gan giatri cho thuoc tinh long nhau
let nestedObject = {
  id: 28802695164,
  date: 'December 31, 2016',
  data: {
    totalUsers: 99,
    online: 80,
    onlineStatus: {
      active: 67,
      away: 13,
      busy: 8
    }
  }
};
nestedObject.data.onlineStatus.busy = 10;//dung dau cham (.) de tham chieu den gia tri


//Khi b·∫°n c√≥ m·ªôt bi·∫øn l∆∞u t√™n thu·ªôc t√≠nh (key) c·ªßa m·ªôt object, b·∫°n ph·∫£i d√πng ngo·∫∑c vu√¥ng ([]) ƒë·ªÉ truy c·∫≠p gi√° tr·ªã ƒë√≥.
const obj = {
  apple: 10,
  banana: 5
};
let fruit = "apple";
console.log(obj[fruit]); // üëâ 10
// B·∫°n kh√¥ng th·ªÉ d√πng obj.fruit, v√¨ nh∆∞ th·∫ø JS s·∫Ω t√¨m obj.fruit (t·ª©c l√† key "fruit", ch·ª© kh√¥ng ph·∫£i "apple").

let foods = {
  apples: 25,
  oranges: 32,
  plums: 28,
  bananas: 13,
  grapes: 35,
  strawberries: 27
};

function checkInventory(scannedItem) {
  // Only change code below this line
  return foods[scannedItem];
  
  // Only change code above this line
}
console.log(checkInventory("apples"));

//Cach xoa thuoc tinh , cap key-values dung: delete foods.apples => thuoc tinh apples da duoc xoa

//kiem tra thuoc tinh co ton tai hay k
// users.hasOwnProperty('Alan');
// 'Alan' in users;
// C·∫£ hai ƒë·ªÅu s·∫Ω tr·ªü l·∫°i true.

const refrigerator = {
  'milk': 1,
  'eggs': 12,
};
for (const food in refrigerator) {
  console.log(food, refrigerator[food]);
}
//for (const food in refrigerator)
// ƒê√¢y l√† c√∫ ph√°p for...in ‚Üí d√πng ƒë·ªÉ duy·ªát qua t·∫•t c·∫£ c√°c thu·ªôc t√≠nh (key) trong object refrigerator.
// M·ªói l·∫ßn l·∫∑p, bi·∫øn food s·∫Ω l√† m·ªôt key trong object.
// L·∫ßn 1: food = 'milk'
// L·∫ßn 2: food = 'eggs'
// console.log(food, refrigerator[food]);
// food l√† key: "milk" ho·∫∑c "eggs"
// refrigerator[food] l√† gi√° tr·ªã t∆∞∆°ng ·ª©ng:
// refrigerator['milk'] ‚Üí 1
// refrigerator['eggs'] ‚Üí 12

// Ch√∫ng ta c≈©ng c√≥ th·ªÉ t·∫°o m·ªôt m·∫£ng ch·ª©a t·∫•t c·∫£ c√°c kh√≥a ƒë∆∞·ª£c l∆∞u tr·ªØ trong m·ªôt ƒë·ªëi t∆∞·ª£ng b·∫±ng Object.keys()ph∆∞∆°ng ph√°p n√†y. 
// Ph∆∞∆°ng ph√°p n√†y l·∫•y m·ªôt ƒë·ªëi t∆∞·ª£ng l√†m ƒë·ªëi s·ªë v√† tr·∫£ v·ªÅ m·ªôt m·∫£ng c√°c chu·ªói bi·ªÉu di·ªÖn t·ª´ng thu·ªôc t√≠nh trong ƒë·ªëi t∆∞·ª£ng.
let users = {
  Alan: {
    age: 27,
    online: false
  },
  Jeff: {
    age: 32,
    online: true
  },
  Sarah: {
    age: 48,
    online: false
  },
  Ryan: {
    age: 19,
    online: true
  }
};

function getArrayOfUsers(obj) {
  // Only change code below this line
 return Object.keys(obj);
  // Only change code above this line
}

console.log(getArrayOfUsers(users));
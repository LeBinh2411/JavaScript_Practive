//Symbol l√† m·ªôt gi√° tr·ªã duy nh·∫•t v√† b·∫•t bi·∫øn, n√≥ th∆∞·ªùng ƒë∆∞·ª£c d√πng ƒë·ªÉ
//t·∫°o key ƒë·ªôc nh·∫•t trong object, nh·∫±m tr√°nh xung ƒë·ªôt gi·ªØa c√°c key,
//ƒë·∫∑c bi·ªát trong c√°c th∆∞ vi√™n hay framework l·ªõn

//L·ª£i √≠ch: 

// - T·∫°o kh√≥a (key) duy nh·∫•t cho Object
//D√π c√≥ m√¥ t·∫£ gi·ªëng nhau (Symbol("abc") v√† Symbol("abc")), hai Symbol v·∫´n kh√°c bi·ªát ho√†n to√†n.
// const sym1 = Symbol("id");
// const sym2 = Symbol("id");
// console.log(sym1 === sym2); // false

// - ·∫®n c√°c thu·ªôc t√≠nh kh·ªèi v√≤ng l·∫∑p
//Khi d√πng Symbol l√†m key, thu·ªôc t√≠nh ƒë√≥ kh√¥ng b·ªã hi·ªÉn th·ªã khi d√πng for...in, Object.keys() ho·∫∑c JSON.stringify().
// const id = Symbol("id");
// const user = { name: "An", [id]: 123 };
// console.log(Object.keys(user)); // ['name']
// console.log(user[id]); // 123

//l∆∞u √Ω 
// Kh√¥ng th·ªÉ d√πng to√°n t·ª≠ + v·ªõi Symbol mu·ªën d√πng th√¨ ph·∫£i √©p ki·ªÉu
// Kh√¥ng th·ªÉ duy·ªát Symbol key b·∫±ng c√°c v√≤ng l·∫∑p th√¥ng th∆∞·ªùng
// for...in, Object.keys() kh√¥ng th·∫•y Symbol.
// Mu·ªën l·∫•y ra th√¨ d√πng Object.getOwnPropertySymbols(obj).

//K·∫øt lu·∫≠n
//D√πng Symbol khi b·∫°n c·∫ßn key ƒë·∫∑c bi·ªát, kh√¥ng b·ªã tr√πng l·∫∑p, 
// ho·∫∑c mu·ªën gi·∫•u thu·ªôc t√≠nh.
// Kh√¥ng thay th·∫ø cho object hay string th∆∞·ªùng,
// m√† ch·ªâ n√™n d√πng khi th·ª±c s·ª± c·∫ßn t√≠nh duy nh·∫•t 
// v√† b·∫£o v·ªá d·ªØ li·ªáu n·ªôi b·ªô.

//B√†i 1: T·∫°o v√† so s√°nh Symbol
//M·ªói l·∫ßn t·∫°o Symbol s·∫Ω l√† t·∫°o m·ªõi m·∫∑c d√π c√≥ m√¥ t·∫£ gi·ªëng nhau

let a = Symbol('hi');
//JavaScript t·∫°o m·ªôt v√πng nh·ªõ ri√™ng, l∆∞u tr·ªØ gi√° tr·ªã Symbol a, 
//v√† ƒë·∫£m b·∫£o r·∫±ng kh√¥ng c√≥ Symbol n√†o kh√°c gi·ªëng h·ªát n√≥ trong h·ªá th·ªëng.

let b = Symbol('hi');
//JavaScript ti·∫øp t·ª•c t·∫°o m·ªôt v√πng nh·ªõ m·ªõi, l∆∞u tr·ªØ m·ªôt Symbol kh√°c ho√†n to√†n 
// (d√π c√πng m√¥ t·∫£ "abc").

console.log(a === b);
////Hai bi·∫øn a v√† b tuy gi·ªëng ph·∫ßn m√¥ t·∫£ khi in ra (Symbol(abc)), 
//nh∆∞ng trong b·ªô nh·ªõ, ch√∫ng ƒë∆∞·ª£c c·∫•p ph√°t ·ªü hai ƒë·ªãa ch·ªâ kh√°c nhau, 
//n√™n ch√∫ng kh√¥ng b·∫±ng nhau, kh√¥ng th·ªÉ tr√πng l·∫∑p.


// B√†i 2: d√πng symbol l√†m key trong object
// let id = Symbol("userId");
// let user = {
//   name: "B√¨nh",
//   [id]: 12345
// };

// console.log(user);         // In ra to√†n b·ªô object
// console.log(user[id]);   


let id = Symbol("userId");
let user = {
  name: "B√¨nh",
  [id]: 12345
};

console.log(Object.keys(user));         // üëâ ["name"]
console.log(Object.getOwnPropertyNames(user)); // üëâ ["name"]
console.log(Object.getOwnPropertySymbols(user)); // üëâ [Symbol(userId)]



//C√°ch t√°i s·ª≠ d·ª•ng Symbol l√†m key
//D√πng Symbol to√†n c·ª•c (global) v·ªõi Symbol.for():
//.for() l√† m·ªôt ph∆∞∆°ng th·ª©c ƒë·∫∑c bi·ªát c·ªßa Symbol gi√∫p t·∫°o v√† truy xu·∫•t c√°c symbol d√πng chung to√†n c·ª•c (global symbol). C·ª• th·ªÉ:
let c = Symbol.for("abc");
let d = Symbol.for("abc");

console.log(c === d); // true
